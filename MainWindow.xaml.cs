using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;
using System.Windows.Threading;
using Capital.Enums;

namespace Capital
{
	/// <summary>
	/// Interaction logic for MainWindow.xaml
	/// </summary>
	public partial class MainWindow
	{
		public MainWindow()
		{
			InitializeComponent();
			Init();
		}

		#region Fields ==============================================
		private readonly DispatcherTimer _timer = new()
		{
			Interval = new TimeSpan(0, 0, 0, 0, 500), // Adjust the interval as needed
			IsEnabled = false
		};
		#endregion

		#region Methods =============================================

		private void Init()
		{
			Combobox.ItemsSource = new List<StrategyType>()
			{
				StrategyType.Fix,
				StrategyType.Capitalization,
				StrategyType.Progress,
				StrategyType.Downgrade
			};
			Combobox.SelectedIndex = 0;

			Depot.Text = "100000";
			StartLot.Text = "10";
			Take.Text = "300";
			Stop.Text = "100";
			Commission.Text = "5";
			CountTrades.Text = "1000";
			PercentGoodDeals.Text = "30";
			Go.Text = "5000";
			MinStartPercent.Text = "20";

			// resize mechanic
			SizeChanged += MainWindow_SizeChanged;
			_timer.Tick += _timer_Tick;

			DataGrid.AutoGeneratedColumns += _dataGrid_AutoGeneratedColumns;

			Calculate();
		}

		private void _timer_Tick(object? sender, EventArgs e)
		{
			_timer.IsEnabled = false;
			Draw();
		}

		private void MainWindow_SizeChanged(object sender, SizeChangedEventArgs e)
		{
			_timer.Stop(); // prevents immediate triggering
			_timer.Start();
			_timer.IsEnabled = true;
		}

		private void _combobox_SelectionChanged(object sender, SelectionChangedEventArgs e) => Draw();

		private void _button_Click(object sender, RoutedEventArgs e) => Calculate();

		private bool GetParam(string name, out decimal param)
		{
			bool bResult = false;

			if (FindName(name) is not TextBox control)
			{
				param = default;
				MessageBox.Show($"Error: cannot find name '{name}' !");
			}
			else
			{
				string text = control.Text.Replace(',', '.');
				bResult = decimal.TryParse(text, CultureInfo.InvariantCulture, out param);
				if (!bResult)
					MessageBox.Show($"Error: cannot parse field '{name}' !");
			}
			return bResult;
		}

		private bool GetParam(string name, out int param)
		{
			bool bResult = GetParam(name, out decimal dParam);
			param = (int)dParam;
			return bResult;
		}

		private void Draw()
		{
			if (DataGrid.ItemsSource is not List<Strategy> strategyList) return;
			
			int index = Combobox.SelectedIndex;
			var results = strategyList[index].GetResults();

			double min = (double)results.Min();
			double max = (double)results.Max();
			double height = max - min;
			if (height == 0)
				height = 1;

			const double marginX = 20;
			const double marginY = 20;

			double kX = (Canvas.ActualWidth - marginX * 2) / (results.Count - 1);
			double kY = (Canvas.ActualHeight - marginY * 2) / height;

			Canvas.Children.Clear();
			var color = Brushes.DarkBlue;

			double prevX = 0;
			double prevY = 0;

			for (int i = 0; i < results.Count; i++)
			{
				double result = (double)results[i];

				double x = marginX + kX * i;
				double y = Canvas.ActualHeight - (marginY + (result - min) * kY);
				if (i == 0) prevX = x;
				if (i == 0) prevY = y;

				/*
					var ellipse = new Ellipse
					{
						Fill = color,
						Stroke = color,
						StrokeThickness = 1,
						Width = 4,
						Height = 4
					};
					ellipse.SetValue(Canvas.LeftProperty, x - 2);
					ellipse.SetValue(Canvas.TopProperty, y - 2);
					_canvas.Children.Add(ellipse);
					*/
				var line = new Line
				{
					X1 = prevX,
					Y1 = prevY,
					X2 = x,
					Y2 = y,
					Stroke = color,
					StrokeThickness = 1,
				};
				prevX = x;
				prevY = y;

				Canvas.Children.Add(line);
			}
		}

		private void Calculate()
		{
			Params p;

			if (!GetParam(Depot.Name, out p.Depot)
				|| !GetParam(StartLot.Name, out p.StartLot)
				|| !GetParam(Take.Name, out p.Take)
				|| !GetParam(Stop.Name, out p.Stop)
				|| !GetParam(Commission.Name, out p.Commission)
				|| !GetParam(PercentGoodDeals.Name, out p.PercentGoodDeals)
				|| !GetParam(CountTrades.Name, out p.CountTrades)
				|| !GetParam(MinStartPercent.Name, out p.MinStartPercent)
				|| !GetParam(Go.Name, out p.Go))
				return;

			if (Combobox.ItemsSource is not List<StrategyType> types)
				return;

			List<Strategy> strategies = types.Select(type => Strategy.CreateStrategy(p, type)).ToList();

			/*
						List<bool> deals = new(_p.CountTrades);
						Random rnd = new Random();
						for (int i = 0; i < _p.CountTrades; ++i)
							deals.Add(rnd.Next(0, 100) < _p.PercentGoodDeals);
			*/

			// list of deals, shared among all strategies
			// true: good deal | false: bad deal
			Random rnd = new Random();
			List<bool> deals = Enumerable.Range(0, p.CountTrades).Select(_ => rnd.Next(0, 100) < p.PercentGoodDeals).ToList();


			foreach (var strategy in strategies)
				strategy.Calculate(deals);

			DataGrid.ItemsSource = strategies;
			Draw();
		}

		private void _dataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
		{
			Style styleBold = new Style(typeof(DataGridCell))
			{ Setters = { new Setter(FontWeightProperty, FontWeights.Bold) } };

			Style styleHorizontalRight = new Style(typeof(DataGridCell))
			{ Setters = { new Setter(HorizontalAlignmentProperty, HorizontalAlignment.Right) } };

			var columns = DataGrid.Columns;
			for (int i = 0; i < columns.Count; i++)
				columns[i].CellStyle = i switch
				{
					0 => styleBold,
					_ => styleHorizontalRight,
				};
		}
		#endregion
	}
}
