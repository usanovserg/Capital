using Capital.Enums;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace Capital
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            Init();
        }

        #region Fields ==============================================
        private DispatcherTimer _timer = new DispatcherTimer
        {
            Interval = new TimeSpan(0, 0, 0, 0, 500), // Adjust the interval as needed
            IsEnabled = false
        };
        #endregion

        #region Methods =============================================

        private void Init()
        {
            _combobox.ItemsSource = new List<StrategyType>()
            {
                StrategyType.FIX,
                StrategyType.CAPITALIZATION,
                StrategyType.PROGRESS,
                StrategyType.DOWNGRADE
            };
            _combobox.SelectedIndex = 0;

            _depot.Text = "100000";
            _startLot.Text = "10";
            _take.Text = "300";
            _stop.Text = "100";
            _comiss.Text = "5";
            _countTrades.Text = "1000";
            _percentGoodDeals.Text = "30";
            _go.Text = "5000";
            _minStartPercent.Text = "20";

            // resize mechanique
            SizeChanged += MainWindow_SizeChanged;
            _timer.Tick += Timer_Tick;

            _dataGrid.AutoGeneratedColumns += DataGrid_AutoGeneratedColumns;

            Calculate();
        }

        private void Timer_Tick(object? sender, EventArgs e)
        {
            _timer.IsEnabled = false;
            Draw();
        }

        private void MainWindow_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            _timer.Stop(); // prevents immediate triggering
            _timer.Start();
            _timer.IsEnabled = true;
        }

        private void _combobox_SelectionChanged(object sender, SelectionChangedEventArgs e) => Draw();

        private void _button_Click(object sender, RoutedEventArgs e) => Calculate();

        public bool GetParam(string name, out decimal param)
        {
            bool bResult = false;

            var control = FindName(name) as TextBox;
            if (control == null)
            {
                param = default;
                MessageBox.Show($"Error: cannot find name '{name}' !");
            }
            else
            {
                string text = control.Text.Replace(',', '.');
                bResult = decimal.TryParse(text, CultureInfo.InvariantCulture, out param);
                if (!bResult)
                    MessageBox.Show($"Error: cannot parse field '{name}' !");
            }
            return bResult;
        }
        public bool GetParam(string name, out int param)
        {
            bool bResult = GetParam(name, out decimal dparam);
            param = (int)dparam;
            return bResult;
        }

        private void Draw()
        {
            if (_dataGrid.ItemsSource is List<Strategy> strategyList)
            {
                int index = _combobox.SelectedIndex;
                List<decimal> results = strategyList[index].GetResults();

                double min = (double)results.Min();
                double max = (double)results.Max();
                double height = max - min;
                if (height == 0)
                    height = 1;

                double marginX = 20;
                double marginY = 20;

                double coeffX = (_canvas.ActualWidth - marginX * 2) / (results.Count - 1);
                double coeffY = (_canvas.ActualHeight - marginY * 2) / height;

                _canvas.Children.Clear();
                var color = Brushes.DarkBlue;

                double prev_x = 0;
                double prev_y = 0;

                for (int i = 0; i < results.Count; i++)
                {
                    double result = (double)results[i];

                    double x = marginX + coeffX * i;
                    double y = _canvas.ActualHeight - (marginY + (result - min) * coeffY);
                    if (i == 0) prev_x = x;
                    if (i == 0) prev_y = y;

                    /*
                    var ellipse = new Ellipse
                    {
                        Fill = color,
                        Stroke = color,
                        StrokeThickness = 1,
                        Width = 4,
                        Height = 4
                    };
                    ellipse.SetValue(Canvas.LeftProperty, x - 2);
                    ellipse.SetValue(Canvas.TopProperty, y - 2);
                    _canvas.Children.Add(ellipse);
                    */
                    var line = new Line
                    {
                        X1 = prev_x,
                        Y1 = prev_y,
                        X2 = x,
                        Y2 = y,
                        Stroke = color,
                        StrokeThickness = 1,
                    };
                    prev_x = x;
                    prev_y = y;

                    _canvas.Children.Add(line);
                }
            }
        }

        private void Calculate()
        {
            Params _p;

            if (!GetParam(_depot.Name, out _p.Depot)
                || !GetParam(_startLot.Name, out _p.StartLot)
                || !GetParam(_take.Name, out _p.Take)
                || !GetParam(_stop.Name, out _p.Stop)
                || !GetParam(_comiss.Name, out _p.Comiss)
                || !GetParam(_percentGoodDeals.Name, out _p.PercentGoodDeals)
                || !GetParam(_countTrades.Name, out _p.CountTrades)
                || !GetParam(_minStartPercent.Name, out _p.MinStartPercent)
                || !GetParam(_go.Name, out _p.Go))
                return;

            if (_combobox.ItemsSource is not List<StrategyType> types)
                return;

            List<Strategy> strategies = types.Select(type => Strategy.CreateStrategy(_p, type)).ToList();

            /*
                        List<bool> deals = new(_p.CountTrades);
                        Random rnd = new Random();
                        for (int i = 0; i < _p.CountTrades; ++i)
                            deals.Add(rnd.Next(0, 100) < _p.PercentGoodDeals);
            */

            // list of deals, shared among all strategies
            // true: good deal | false: bad deal
            Random rnd = new Random();
            List<bool> deals = Enumerable.Range(0, _p.CountTrades).Select(item => rnd.Next(0, 100) < _p.PercentGoodDeals).ToList();


            foreach (var strategy in strategies)
                strategy.Calculate(deals);

            _dataGrid.ItemsSource = strategies;
            Draw();
        }

        private void DataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            Style styleBold = new Style(typeof(DataGridCell))
            { Setters = { new Setter(FontWeightProperty, FontWeights.Bold) } };

            Style styleHorizontalRight = new Style(typeof(DataGridCell))
            { Setters = { new Setter(HorizontalAlignmentProperty, HorizontalAlignment.Right) } };

            var columns = _dataGrid.Columns;
            for (int i = 0; i < columns.Count; i++)
                switch (i)
                {
                    case 0:
                        columns[i].CellStyle = styleBold;
                        break;

                    default:
                        columns[i].CellStyle = styleHorizontalRight;
                        break;
                }

        }
        #endregion
    }
}
